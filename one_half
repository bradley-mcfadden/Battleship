COSC2947 E "Object Oriented Programming Using C++
-------------------------------------------------
Programming Project
===================


Task
----

Develop a program to play the game BattleShip (ht
//en.wikipedia.org/wiki/Battleship_(game))
on a computer. The design of the program shall ma
possible to implement computer players
of different strength. However only one (very sim
player is required for the project.


Implementation
--------------

The program uses several classes. Each class shou
its own source code and header file.
Equip the header files with include guards. The f
types, classes and functions should be
implemented.


EnemyPiece
=--------=
EnemyPiece is an enumeration type that represents
possible contents of a square on the
board. A possible definition is

enum class EnemyPiece {HIT, MISS, EMPTY};


EnemyPiece can be defined in the header file of t
class.


PlayerPiece
=---------=
PlayerPiece is an enumeration type that represent
possible contents of a square on the board.

A possible definition is

enum class PlayerPiece {AIRCRAFT, BATTLESHIP, CRU
SUBMARINE, PATROL, EMPTY};

PlayerPiece can be defined in the header file of 
class.


Move
=--=
The program represents moves by a character and a
These combine to form the index of the square whe
piece is placed in the board array. Move is there
typedef that defines Move as an appropriate struc


Board
=---=
The Board class represents the current state of t
It contains two one-dimensional arrays of size 10
of the board squares, one for each players’s pi
are PlayerPiece). It also contains two one-dimens
arrays of size 100 (10x10) of EnemyPiece which ar
display purposes. It provides the following membe

Board(): Default constructor that initializes the
calling the member function reset().

void reset() noexcept: Erases all ships and shot 
from their respective boards.

void display(int player) const noexcept: If playe
then display player one’s current board of Play
player two’s current board of EnemyPiece. If pl
then display the opposite boards.

EnemyPiece makeMove(const Move &): Executes the m
indicated by the function parameter, and updates 
boards accordingly.

bool isLegal(const Move &) const noexcept: Checks
it is legal to attack the specified location.


Player
=----=
Player is an abstract base class for the common f
of human and computer players. It stores the name
and an instance of the Board class belonging to t
interface contains the following member functions

Player(const string&): The constructor of the Pla
receives the name of the player.

Move makeMove(const Board &): This is a pure virt
that gets the players move.

Player has no default constructor.


HumanPlayer
=---------=
This class is derived from the class Player. The 
makeMove(const Board&) prompts the user for the l
they want to launch their attack. This function s
loop until the user enters a valid move, per the 
Board::isLegal function.


ComputerPlayer
=------------=
This class is an abstract base class derived from
Player. The class implements common functionality
computer player classes. It does not implement th
makeMove(constBoard &) member function. The class
different computer players get different names as
first computer player is named Computer A, the se
player is named Computer B, etc. In order to crea
the class uses a static variable of type char tha
every time that an instance of ComputerPlayer is 
the char passes the ‘Z’ character, it should 
The interface of the class only has one member:

ComputerPlayer::ComputerPlayer(): The initializer
player's name and passes it to the base class con


RandomPlayer
------------
This class implements a very simple computer play
implementation of the makeMove(const Board &) mem
makes random (but legal) moves. Like all computer
classes RandomPlayer inherits from ComputerPlayer
generator should use a mersenne twister, availabl
seeded with the current time.


Game
-----
The Game class controls the flow of a game. It co
Pointers to Player objects as member variables, a
object. The class provides the following member f

Game::Game(): The default constructor initializes
board and sets the player pointers to nullptr.

Game::~Game(): The destructor deallocates any dyn
allocated objects.

void selectPlayers(): Prompts the user for each o
players for the type(human/computer) of the playe
human player the function also asks for the playe
The function then creates the objects for the pla
dynamically.

Player* nextPlayer() const: The function returns 
pointer to the player whose move it is.

void play(): While isRunning returns true, the fu
displays the current player’s boards and invoke
member function of the player whose move it is. T
function then passes the result of the player’s
function to the Board’s makeMove, and displays 
an appropriate message of whether or not they hit
vessel.

void announceWinner(): Announces the end of the g
the name of the winner.

bool isRunning(): returns true if neither player 


main()
------
The main function of the program creates a Game o
then calls its member functions selectPlayers(), 
announceWinner(). Place this function in its own 


Due Date
--------
The project is due on Tuesday, December 3, 2019 a
Late submissions will be penalized by 20% per day
maximum of one day!


Submission and Grading
----------------------
The programming projects can be solved using any 
-conforming C++ compiler on any operating system.
solutions shall adhere to the C++ ISO-standard an
submitted in source form only, i.e. as *.cpp and 
*.hpp files. Do not submit any executables or obj
In order to facilitate grading, the code should b
formatted in an easily readable manner and should
sufficient documentation (comments), including th
and student number of the submitter.

The solutions must be submitted to D2L. Do not pa
source code into the comment box. Only compress t
Do not compress to “7z” or "rar" or any other
except source code (*.cpp) and header (*.h, *.hpp
files will be considered.

The solutions will be graded according to the fol
three factors:
1. Program functionality
2. Quality of implementation
3. Documentation, formatting, and readability

Programs must compile without errors.
